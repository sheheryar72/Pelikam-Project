#pragma checksum "C:\Users\sheharyar.izhar\Desktop\dotnet_work\freelancing\Pelikan_Project\Pelikan_Project\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8133f76b6965fc233b8bd12891292202932e82bb"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\sheharyar.izhar\Desktop\dotnet_work\freelancing\Pelikan_Project\Pelikan_Project\Views\_ViewImports.cshtml"
using Pelikan_Project;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\sheharyar.izhar\Desktop\dotnet_work\freelancing\Pelikan_Project\Pelikan_Project\Views\_ViewImports.cshtml"
using Pelikan_Project.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8133f76b6965fc233b8bd12891292202932e82bb", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"537de43834effe56a6617d14c2c5463ffc072286", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html lang=\"en\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8133f76b6965fc233b8bd12891292202932e82bb3689", async() => {
                WriteLiteral(@"
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Form</title>
    <link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"">
    <style>
        body {
            background-color: #f8f9fa;
        }

        .container {
            margin-top: 50px;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .btn-container {
            margin-top: 25px;
            display: flex;
            flex-wrap: wrap;
        }

        /* Common styles for buttons */
        .btn {
            display: inline-block;
            padding: 12px 20px;
            font-size: 20px;
            font-weight: bold;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            border-radius: 20px;
            color: white;
            width: 200px;
        }

            /* Button hover effects */
            ");
                WriteLiteral(@".btn:hover {
                transform: scale(1.05);
            }

        /* Button colors and hover colors */
        .btn-inspection-pass {
            background-color: #28a745;
        }

            .btn-inspection-pass:hover {
                background-color: #218838;
            }

        .btn-oil-spill {
            background-color: #007bff;
        }

            .btn-oil-spill:hover {
                background-color: #0056b3;
            }

        .btn-arm-hole {
            background-color: #ffc107;
        }

            .btn-arm-hole:hover {
                background-color: #cca000;
            }

        .btn-border-cuff {
            background-color: #dc3545;
        }

            .btn-border-cuff:hover {
                background-color: #a51c28;
            }

        .btn-pocket-invert {
            background-color: #008080;
        }

            .btn-pocket-invert:hover {
                background-color: #006666;
            }

    ");
                WriteLiteral(@"    .btn-fly-yarm {
            background-color: #FF8C00;
        }

            .btn-fly-yarm:hover {
                background-color: #FF4500;
            }

        .btn-fabric-hole {
            background-color: #FF5733;
        }

            .btn-fabric-hole:hover {
                background-color: #DB4C28;
            }

        .btn-dirt-mark {
            background-color: #FA8072;
        }

            .btn-dirt-mark:hover {
                background-color: #CD5C5C;
            }

        .btn-shading {
            background-color: #A67B5B;
        }

            .btn-shading:hover {
                background-color: #87594D;
            }

        .btn-uncut {
            background-color: #808000;
        }

            .btn-uncut:hover {
                background-color: #666600;
            }

        .btn-extra-defect {
            background-color: #8A2BE2;
        }

            .btn-extra-defect:hover {
                background-color: #69");
                WriteLiteral(@"1EB8;
            }

        /* Add button */
        #add_inspection {
            background-color: #6c757d;
            padding: 12px 24px;
            font-size: 20px;
            border-radius: 15px;
            width: 800px;
            margin-top: 20px; /* Add some space between the defect buttons and the ""Add"" button */
            text-align: center;

        }

            #add_inspection:hover {
                background-color: #495057;
            }
        /* Style for the export button */
        #exportBtn {
            background-color: #6c757d; /* Light black background color */
            display: inline-block;
            padding: 5px 24px;
            font-size: 20px;
            font-weight: bold;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            border-radius: 8px;
            color: white; /* Smooth transition for hover effect */
        }

            /* Hover effect for the export button */
    ");
                WriteLiteral("        #exportBtn:hover {\r\n                background-color: #495057; /* Full black hover color */\r\n            }\r\n    </style>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js\"></script>\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8133f76b6965fc233b8bd12891292202932e82bb9146", async() => {
                WriteLiteral("\r\n    <div class=\"container\">\r\n        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8133f76b6965fc233b8bd12891292202932e82bb9445", async() => {
                    WriteLiteral(@"
            <div class=""form-group"">
                <label for=""operatorId"">Operator ID</label>
                <input type=""text"" class=""form-control"" id=""OperatorID"" readonly>
            </div>
            <div class=""form-group"">
                <label for=""name"">Name</label>
                <input type=""text"" class=""form-control"" id=""Name"" readonly>
            </div>
            <div class=""form-group"">
                <label for=""designation"">Designation</label>
                <input type=""text"" class=""form-control"" id=""Designation"" readonly>
            </div>
            <div class=""row"">
                <div class=""col-md-4"">
                </div>
                <div class=""col-md-2"">
                    <div class=""form-group"">
                        <label for=""timeFrom"">Time From</label>
                        <input type=""time"" class=""form-control"" id=""FromTime"">
                    </div>
                </div>
                <div class=""col-md-2"">
               ");
                    WriteLiteral(@"     <div class=""form-group"">
                        <label for=""timeTo"">Time To</label>
                        <input type=""time"" class=""form-control"" id=""ToTime"">
                    </div>
                </div>
                <div class=""col-md-4"">
                    <div class=""form-group"">
                        <button type=""button"" id=""exportBtn"" class=""btn btn-lg btn-success form-control mt-4"">Export to Excel</button>
                    </div>
                </div>
            </div>

");
                    WriteLiteral(@"
            <div class=""row btn-container"">
                <div class=""col text-center"">
                    <button type=""button"" class=""btn btn-lg btn-inspection-pass"" id=""Inspection_Pass"">Inspection Pass</button>
                </div>
            </div>
            <div class=""row btn-container"">
                <div class=""col text-center"">
                    <button type=""button"" class=""operation_class btn btn-lg btn-oil-spill"" value=""1"" id=""Oil_Spill"">Oil Spill</button>
                    <button type=""button"" class=""operation_class btn btn-lg btn-arm-hole"" id=""Arm_Hole"">Arm Hole</button>
                    <button type=""button"" class=""operation_class btn btn-lg btn-border-cuff"" id=""Border_Cuff"">Border Cuff</button>
                    <button type=""button"" class=""operation_class btn btn-lg btn-pocket-invert"" id=""Pocket_Invert"">Pocket Invert</button>
                    <button type=""button"" class=""operation_class btn btn-lg btn-fly-yarm"" id=""Fly_Yarm"">Fly Yarm</button>
              ");
                    WriteLiteral(@"  </div>
            </div>
            <div class=""row btn-container"">
                <div class=""col text-center"">
                    <button type=""button"" class=""operation_class btn btn-lg btn-fabric-hole"" id=""Fabric_Hole"">Fabric Hole</button>
                    <button type=""button"" class=""operation_class btn btn-lg btn-dirt-mark"" id=""Dirt_Mark"">Dirt Mark</button>
                    <button type=""button"" class=""operation_class btn btn-lg btn-shading"" id=""Shading"">Shading</button>
                    <button type=""button"" class=""operation_class btn btn-lg btn-uncut"" id=""Uncut"">Uncut</button>
                    <button type=""button"" class=""operation_class btn btn-lg btn-extra-defect"" id=""Extra_Defect"">Extra Defect</button>
                </div>
            </div>
            <div class=""row btn-container"">
                <div class=""col text-center"">
                    <button type=""button"" class=""btn btn-dark"" id=""add_inspection"" style=""padding-left: 25%; padding-right: 25%; padding-to");
                    WriteLiteral("p: 1.5%; padding-bottom: 1.5%; text-transform: uppercase; font-weight: 700; font-size: 28px\">Add</button>\r\n                </div>\r\n            </div>\r\n        ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n    </div>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
</html>

<script>

    document.addEventListener('DOMContentLoaded', function () {
        const fromTimeInput = document.getElementById('FromTime');
        const toTimeInput = document.getElementById('ToTime');

        // Round time to nearest hour
        function roundTimeToNearestHour(timeInput) {
            const timeParts = timeInput.value.split(':');
            let hours = parseInt(timeParts[0], 10);
            const minutes = parseInt(timeParts[1], 10);

            // Round to nearest hour
            if (minutes >= 30) {
                hours += 1;
            }

            // Set the new time value
            timeInput.value = (hours < 10 ? '0' : '') + hours + ':00';
        }

        // Add change event listener to FromTime input
        fromTimeInput.addEventListener('change', function () {
            roundTimeToNearestHour(fromTimeInput);
        });

        // Add change event listener to ToTime input
        toTimeInput.addEventListener('change', functi");
            WriteLiteral(@"on () {
            roundTimeToNearestHour(toTimeInput);
        });
    });


    window.addEventListener(""load"", function () {
        const OperatorID = localStorage.getItem(""OperatorID"");
        console.log(""OperatorID OperatorID: "", OperatorID)
        if (OperatorID !== null && OperatorID !== '' && OperatorID !== '0') {
            $.get({
                url: `/Operator/GetOperatorByID?OperatorID=${OperatorID}`,
                contentType: 'application/json',
                //data: { OperatorID: Number(OperatorID) }, // No need to stringify the data
                dataType: 'json',
                success: function (response) {
                    console.log('response: ', response)
                    if (response.status == 400) {
                        alert(""Sorry no operator found!"")
                        window.location.href = '/Operator/Login'
                    }
                    if (response.status == 200) {
                        // Clear input fields if neede");
            WriteLiteral(@"d
                        document.getElementById(""OperatorID"").value = response.data.operatorID;
                        document.getElementById(""Name"").value = response.data.name;
                        document.getElementById(""Designation"").value = response.data.designation;
                    }
                },
                error: function (error) {
                    console.log(error);
                }
            });
        } else {
            window.location.href = '/Operator/Login'
        }
    });

    const operation_obj = {
        ""Oil_Spill"": 0,
        ""Arm_Hole"": 0,
        ""Border_Cuff"": 0,
        ""Pocket_Invert"": 0,
        ""Fly_Yarm"": 0,
        ""Fabric_Hole"": 0,
        ""Dirt_Mark"": 0,
        ""Shading"": 0,
        ""Uncut"": 0,
        ""Extra_Defect"": 0
    }

    let total_inspection = 0;

    const operation_class = document.querySelectorAll("".operation_class"");

    document.getElementById(""Inspection_Pass"").addEventListener(""click"", function ");
            WriteLiteral(@"() {
        total_inspection += 1;
    })

    operation_class.forEach(operation => {
        operation.addEventListener(""click"", function () {
            console.log('operation: ', operation);
            operation_obj[operation.id] += 1;
            total_inspection += 1;
            console.log('total_inspection: ', total_inspection)
            console.log('operation_obj: ', operation_obj)
        });
    });

    document.getElementById(""add_inspection"").addEventListener(""click"", function () {
        const OperatorID = document.getElementById(""OperatorID"").value;
        const FromTime = document.getElementById(""FromTime"").value;
        const ToTime = document.getElementById(""ToTime"").value;

        if (OperatorID !== null && OperatorID !== '' && OperatorID !== '0' && FromTime != '' && ToTime != '' && total_inspection > 0) {

            //debugger

            $.post({
                url: `/home/AddInspection`,
                contentType: 'application/json',
            ");
            WriteLiteral(@"    data: JSON.stringify({
                    ID: 0,
                    Operator_ID: Number(OperatorID),
                    FromTime: FromTime,
                    ToTime: ToTime,
                    CHK: total_inspection,
                    DEF: 0,
                    Inspection_Date: null,
                    Operation: '',
                    Operation_Obj: operation_obj
                }),
                dataType: 'json',
                success: function (response) {
                    console.log('response: ', response)
                    if (response.status == 400) {
                        alert(""Something wrong Insepection not intered. try again!"")
                    }
                    if (response.status == 200) {
                        total_inspection = 0;

                        for (let key in operation_obj) {
                            if (operation_obj.hasOwnProperty(key)) {
                                operation_obj[key] = 0;
                           ");
            WriteLiteral(@" }
                        }

                        alert(""Inspection successfully inserted!"")
                    }
                },
                error: function (error) {
                    console.log(error);
                }
            });
        } else {
            alert(""Please fill in all required fields and add at least one inspection item."")
        }

    })

    document.getElementById(""exportBtn"").addEventListener(""click"", function () {

        const inspection_Date = new Date().toISOString();

        console.log('inspection_Date: ', inspection_Date)

        $.get({
            url: `/Home/GetAllInspectionByDate?inspection_Date=${inspection_Date}`,
            contentType: 'application/json',
            dataType: 'json',
            success: function (response) {
                console.log('respponse: ', response);

                if (response != undefined) {

                    let duplicateCount = response.reduce((acc, obj) => {
                ");
            WriteLiteral(@"        if (obj.operation === 'Oil_Spill') {
                            acc++;
                        }
                        return acc;
                    }, 0);

                    console.log(""Duplicate count for 'John':"", duplicateCount);

                    const data = [
                        [""Point Checker Name"", ""Operation"", ""09:00-10:00 CHK"", ""09:00-10:00 DEF"", ""10:00-11:00 CHK"", ""10:00-11:00 DEF"", ""11:00-12:00 CHK"", ""11:00-12:00 DEF"", ""12:00-13:00 CHK"", ""12:00-13:00 DEF"", ""13:00-14:00 CHK"", ""13:00-14:00 DEF"", ""14:00-15:00 CHK"", ""14:00-15:00 DEF"", ""15:00-16:00 CHK"", ""15:00-16:00 DEF"", ""16:00-17:00 CHK"", ""16:00-17:00 DEF"", ""17:00-18:00 CHK"", ""17:00-18:00 DEF"", ""18:00-19:00 CHK"", ""18:00-19:00 DEF"", ""Total""],
                    ];

                    let total_check_1 = 0, total_check_2 = 0, total_defect_1 = 0, total_defect_2 = 0;
                    let total_check_array1 = [""Total"", """"];
                    //let total_check_array2 = [""Total"", """"];
                    let t");
            WriteLiteral(@"otal_percentage_array1 = [""Percentage %"", """"];

                    for (let i = 0; i < 10; i++) {

                        console.log('response: response: ', response)

                        let single_operation = response.filter(item => item.operation == response[i].operation);
                        let new_data = [];
                        new_data.push(response[i].name);
                        new_data.push(response[i].operation);
                        for (let j = 0; j < single_operation.length; j++) {

                            console.log('single_operation: ', single_operation[j])
                            new_data.push(single_operation[j].chk, single_operation[j].def);
                        }
                        data.push(new_data);
                    }

                    //console.log('total_check_1: ', total_check_1)
                    //console.log('total_defect_1: ', total_defect_1)
                    //console.log('total_check_2: ', total_check_2)
    ");
            WriteLiteral(@"                //console.log('total_defect_2: ', total_defect_2)

                    //data.push(total_check_array1)

                    let startpoint = 0;
                    let endpoint = 10;
                    for (let i = 0; i < duplicateCount; i++) {
                        console.log('duplicateCount duplicateCount: ', duplicateCount)
                        total_check_1 = 0;
                        total_defect_1 = 0;
                        for (let i = startpoint; i < endpoint; i++) {
                            console.log('startingpint: loop', i)
                            console.log('total points: response: ', response[i])
                            total_check_1 = response[i].chk;
                            total_defect_1 += response[i].def;
                        }
                        startpoint += 10;
                        endpoint += 10;
                        console.log('total_check_1: ', total_check_1)
                        console.log('total_defect_1");
            WriteLiteral(@": ', total_defect_1)
                        total_check_array1.push(total_check_1)
                        total_check_array1.push(total_defect_1)

                        let total_percentage = (total_check_1 / 100);
                        let final_val = total_defect_1 / total_percentage
                        total_percentage_array1.push(final_val);
                        total_percentage_array1.push("" "");
                    }

                    data.push(total_check_array1)
                    data.push(total_percentage_array1)

                    let wb = XLSX.utils.book_new();

                    let ws = XLSX.utils.aoa_to_sheet(data);

                    XLSX.utils.book_append_sheet(wb, ws, ""Sheet1"");

                    XLSX.writeFile(wb, ""export.xlsx"");

                }


                //if (response != undefined) {

                //    let duplicateCount = response.reduce((acc, obj) => {
                //        if (obj.operation === 'Oil_Spill') {
     ");
            WriteLiteral(@"           //            acc++;
                //        }
                //        return acc;
                //    }, 0);

                //    console.log(""Duplicate count for 'John':"", duplicateCount);

                //    //let ddd = response.filter(item => item.operation == 'Oil_Spill')
                //    //console.log('ddd: ', ddd);

                //    // Dummy data
                //    const data = [
                //        [""Point Checker Name"", ""Operation"", ""09:00-10:00 CHK"", ""09:00-10:00 DEF"", ""10:00-11:00 CHK"", ""10:00-11:00 DEF"", ""11:00-12:00 CHK"", ""11:00-12:00 DEF"", ""12:00-13:00 CHK"", ""12:00-13:00 DEF"", ""13:00-14:00 CHK"", ""13:00-14:00 DEF"", ""14:00-15:00 CHK"", ""14:00-15:00 DEF"", ""15:00-16:00 CHK"", ""15:00-16:00 DEF"", ""16:00-17:00 CHK"", ""16:00-17:00 DEF"", ""17:00-18:00 CHK"", ""17:00-18:00 DEF"", ""18:00-19:00 CHK"", ""18:00-19:00 DEF"", ""Total""],
                //        //[response[0].name, response[0].operation, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1");
            WriteLiteral(@"9, 20],
                //        //[response.name, response.operation, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                //        //[response.name, response.operation, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                //        //[response.name, response.operation, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                //        //[response.name, response.operation, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                //        //[response.name, response.operation, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                //        //[response.name, response.operation, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                //        //[response.name, response.operation, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                //        //[response.name, response.ope");
            WriteLiteral(@"ration, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                //        //[response.name, response.operation, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                //        //[response.name, response.operation, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                //        //[""Total"", """", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                //        //[""Percentage %"", """", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
                //    ];

                //    let total_check_1 = 0, total_check_2 = 0, total_defect_1 = 0, total_defect_2 = 0;
                //    let total_check_array1 = [""Total"", """"];
                //    let total_check_array2 = [""Total"", """"];

                //    for (let i = 0; i < 10; i++) {

                //        console.log('response: response: ', response)

                //        total_check_1 =");
            WriteLiteral(@" response[i].chk;
                //        total_defect_1 += response[i].def;

                //        total_check_array1.push(total_check_1);

                //        let single_operation = response.filter(item => item.operation == response[i].operation);
                //        let new_data = [];
                //        new_data.push(response[i].name);
                //        new_data.push(response[i].operation);
                //        for (let j = 0; j < single_operation.length; j++) {
                //            total_check_2 += single_operation[j].chk;
                //            total_defect_2 += single_operation[j].def;
                //            console.log('single_operation: ', single_operation[j])
                //            new_data.push(single_operation[j].chk, single_operation[j].def);
                //        }
                //        data.push(new_data);
                //        //data.push([response[i].name, response[i].operation, response[i], 2, 3, 4");
            WriteLiteral(@", 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])
                //    }

                //    console.log('total_check_1: ', total_check_1)
                //    console.log('total_defect_1: ', total_defect_1)
                //    console.log('total_check_2: ', total_check_2)
                //    console.log('total_defect_2: ', total_defect_2)

                //    data.push(total_check_array1)
                //    //data.push([""Total"", """", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])
                //    //data.push([""Percentage %"", """", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])

                //    // Create a new Excel workbook
                //    let wb = XLSX.utils.book_new();

                //    // Convert the data array to an Excel sheet
                //    let ws = XLSX.utils.aoa_to_sheet(data);

                //    // Add the sheet to the workbook
                //    XLSX.utils.book_append_shee");
            WriteLiteral(@"t(wb, ws, ""Sheet1"");

                //    // Save the workbook as an Excel file
                //    XLSX.writeFile(wb, ""export.xlsx"");

                //}

            },
            error: function (error) {
                console.log(error);
            }
        });

    });

</script>


");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
